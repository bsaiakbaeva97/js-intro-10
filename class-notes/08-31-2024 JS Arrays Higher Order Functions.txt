08-31-2024 - JS Arrays Higher Order Functions


HOW TO CREATE FUNCTIONS in JS 

1. Function declaration - traditional 

SYNTAX:
function funcName(args) {
  // block
}


function sum(a, b) {
  return a + b;
}


sum(3, 5); 


2. Function expression 
const sum = function (a, b) {
  return a + b;
}

sum(3, 5);


3. Arrow functions: released with ES6 and it provides more concise way to create functions 
const sum = (a, b) => {
  return a + b;
}



// Create a function called product which returns the multiplication of 2 numbers

// Function declaration
function product(a, b) {
  return a * b;
}

// Function expression 
const product = function (a, b) {
  return a * b;
}

// Arrow function 
const product = (a, b) => {
  return a * b;
}


// Write a function called printHello which prints 'Hello'

// function declaration 
function printHello() {
  console.log('Hello');
}

// Function expression 
const printHello = function () {
  console.log('Hello');
}

// Arrow function 
const printHello = () => {
  console.log('Hello');
}


// Enhanced Arrow function when there only 1 line of code within body 
const product = (a, b) => a * b; // return type 
const printHello = () => console.log('Hello'); // void





function greet(func) {
  console.log('Hello');
  func();
}


function getInfo() {
  console.log('Today is Saturday');
}

greet(getInfo);

OUTPUT:
Hello
Today is Saturday

greet: higher order function (taking another function as an argument)
getInfo: callback function (passed as an argument to another function)


3 + 5 / 2     -> 5.5
(3 + 5) / 2   -> 4


[ 3, 5, 8, 15 ] -> [ 9, 15, 24, 45 ]

const numbers = [ 3, 5, 8, 15 ];

const result = [];

for(const num of numbers) {
  result.push(num * 3);
}

numbers.map((number) => number * 3);